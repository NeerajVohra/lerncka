#TOKEN=$(kubectl -n prod describe secret $(kubectl -n prod get secret | awk '/^admin-prod-ns-sa-token-/{print $1}') | grep token: | awk '{print $2}')
#echo $TOKEN
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: admin-prod-ns-sa 
  namespace: prod 

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: admin-prod-ns
  namespace: prod
rules:
rules:
- apiGroups:
  - "*"
  resources:
   - bindings
   - configmaps
   - endpoints
   - events
   - limitranges
   - persistentvolumeclaims
   - pods
   - pods/log
   - podtemplates
   - replicationcontrollers
   - resourcequotas
   - secrets
   - serviceaccounts
   - services
   - controllerrevisions
   - daemonsets
   - deployments
   - deployments/scale
   - replicasets
   - replicasets/scale
   - statefulsets
   - statefulsets/scale
   - localsubjectaccessreviews
   - horizontalpodautoscalers
   - cronjobs
   - jobs
   - leases
   - endpointslices
   - ingresses
   - networkpolicies
   - poddisruptionbudgets
   - rolebindings
   - roles
  verbs:
  - describe
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
    #- apiGroups: ["*"] # "*" indicates all API groups 
    # resources: ["pods","services", "nodes", "namespaces", "deployments"]
    #verbs: ["get", "watch", "list"]
  #verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "testuser" to read pods in the "kube-system" namespace.
metadata:
  name: admin-prod-ns-binding
  namespace: prod
subjects:
- kind: ServiceAccount
  name: admin-prod-ns-sa # Name is case sensitive
  namespace: prod
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: admin-prod-ns # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
